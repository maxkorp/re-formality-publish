// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";

function exposeFieldResult(fieldStatus) {
  if (fieldStatus && !fieldStatus._1) {
    return fieldStatus._0;
  }
  
}

function validateFieldOnChangeWithoutValidator(fieldInput, setStatus) {
  return Curry._1(setStatus, /* Dirty */{
              _0: {
                TAG: /* Ok */0,
                _0: fieldInput
              },
              _1: /* Hidden */1
            });
}

function validateFieldOnChangeWithValidator(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (fieldStatus && !fieldStatus._1) {
    exit = 2;
  } else {
    exit$1 = 3;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, /* Dirty */{
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._1(validator.validate, input);
        if (result.TAG === /* Ok */0) {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._1(validator.validate, input),
                    _1: /* Shown */0
                  });
    
  }
}

function validateFieldOnChangeWithValidatorAndMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (fieldStatus && !fieldStatus._1) {
    exit = 3;
  } else {
    exit$1 = 4;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, metadata);
        if (result.TAG === /* Ok */0) {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Shown */0
                  });
    
  }
}

function validateFieldOfCollectionOnChangeWithValidator(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (fieldStatus && !fieldStatus._1) {
    exit = 3;
  } else {
    exit$1 = 4;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, index);
        if (result.TAG === /* Ok */0) {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Shown */0
                  });
    
  }
}

function validateFieldOfCollectionOnChangeWithValidatorAndMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (fieldStatus && !fieldStatus._1) {
    exit = 3;
  } else {
    exit$1 = 4;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._3(validator.validate, input, index, metadata);
        if (result.TAG === /* Ok */0) {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, /* Dirty */{
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        return Curry._1(setStatus, /* Dirty */{
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Shown */0
                  });
    
  }
}

function validateDependentFieldOnChange(input, fieldStatus, validator, setStatus) {
  if (fieldStatus && !fieldStatus._1) {
    return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                    _0: Curry._1(validator.validate, input),
                    _1: /* Shown */0
                  }));
  }
  
}

function validateDependentFieldOnChangeWithMetadata(input, metadata, fieldStatus, validator, setStatus) {
  if (fieldStatus && !fieldStatus._1) {
    return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Shown */0
                  }));
  }
  
}

function validateDependentFieldOfCollectionOnChange(input, index, fieldStatus, validator, setStatus) {
  if (fieldStatus && !fieldStatus._1) {
    return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Shown */0
                  }));
  }
  
}

function validateDependentFieldOfCollectionOnChangeWithMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  if (fieldStatus && !fieldStatus._1) {
    return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Shown */0
                  }));
  }
  
}

function validateFieldOnBlurWithoutValidator(fieldInput, fieldStatus, setStatus) {
  if (fieldStatus) {
    return ;
  } else {
    return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                    _0: {
                      TAG: /* Ok */0,
                      _0: fieldInput
                    },
                    _1: /* Hidden */1
                  }));
  }
}

function validateFieldOnBlurWithValidator(input, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (fieldStatus) {
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                      _0: Curry._1(validator.validate, input),
                      _1: /* Shown */0
                    }));
    }
    
  }
  
}

function validateFieldOnBlurWithValidatorAndMetadata(input, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (fieldStatus) {
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                        _0: Curry._2(validator.validate, input, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                      _0: Curry._2(validator.validate, input, metadata),
                      _1: /* Shown */0
                    }));
    }
    
  }
  
}

function validateFieldOfCollectionOnBlurWithValidator(input, index, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (fieldStatus) {
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                        _0: Curry._2(validator.validate, input, index),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                      _0: Curry._2(validator.validate, input, index),
                      _1: /* Shown */0
                    }));
    }
    
  }
  
}

function validateFieldOfCollectionOnBlurWithValidatorAndMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (fieldStatus) {
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                        _0: Curry._3(validator.validate, input, index, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      return Caml_option.some(Curry._1(setStatus, /* Dirty */{
                      _0: Curry._3(validator.validate, input, index, metadata),
                      _1: /* Shown */0
                    }));
    }
    
  }
  
}

function validateAsync(value, validate, andThen) {
  var __x = Curry._1(validate, value);
  __x.then(function (res) {
        return Promise.resolve(Curry._1(andThen, res));
      });
  
}

function validateAsyncWithMetadata(value, metadata, validate, andThen) {
  var __x = Curry._2(validate, value, metadata);
  __x.then(function (res) {
        return Promise.resolve(Curry._1(andThen, res));
      });
  
}

function exposeFieldResult$1(fieldStatus) {
  if (typeof fieldStatus === "number") {
    return ;
  } else if (fieldStatus.TAG === /* Dirty */0) {
    if (fieldStatus._1) {
      return ;
    } else {
      return {
              TAG: /* Result */1,
              _0: fieldStatus._0
            };
    }
  } else {
    return {
            TAG: /* Validating */0,
            _0: fieldStatus._0
          };
  }
}

function validateFieldOnChangeInOnBlurMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit = 2;
  }
  if (exit === 2 && !submissionStatus && match !== 1) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: Curry._1(validator.validate, input),
                _1: /* Hidden */1
              });
  }
  var result = Curry._1(validator.validate, input);
  if (result.TAG === /* Ok */0) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Hidden */1
              });
  } else {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Shown */0
              });
  }
}

function validateFieldOnChangeInOnBlurModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit = 2;
  }
  if (exit === 2 && !submissionStatus && match !== 1) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: Curry._2(validator.validate, input, metadata),
                _1: /* Hidden */1
              });
  }
  var result = Curry._2(validator.validate, input, metadata);
  if (result.TAG === /* Ok */0) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Hidden */1
              });
  } else {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Shown */0
              });
  }
}

function validateFieldOfCollectionOnChangeInOnBlurMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit = 2;
  }
  if (exit === 2 && !submissionStatus && match !== 1) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: Curry._2(validator.validate, input, index),
                _1: /* Hidden */1
              });
  }
  var result = Curry._2(validator.validate, input, index);
  if (result.TAG === /* Ok */0) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Hidden */1
              });
  } else {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Shown */0
              });
  }
}

function validateFieldOfCollectionOnChangeInOnBlurModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit = 2;
  }
  if (exit === 2 && !submissionStatus && match !== 1) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: Curry._3(validator.validate, input, index, metadata),
                _1: /* Hidden */1
              });
  }
  var result = Curry._3(validator.validate, input, index, metadata);
  if (result.TAG === /* Ok */0) {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Hidden */1
              });
  } else {
    return Curry._1(setStatus, {
                TAG: /* Dirty */0,
                _0: result,
                _1: /* Shown */0
              });
  }
}

function validateFieldOfOptionTypeOnChangeInOnBlurMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._1(validator.validate, input);
        if (result.TAG === /* Ok */0 && result._0 === undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        var result$1 = Curry._1(validator.validate, input);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionTypeOnChangeInOnBlurModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, metadata);
        if (result.TAG === /* Ok */0 && result._0 === undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._2(validator.validate, input, metadata);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, index);
        if (result.TAG === /* Ok */0 && result._0 === undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._2(validator.validate, input, index);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurModeWithMetadata(input, metadata, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._3(validator.validate, input, index, metadata);
        if (result.TAG === /* Ok */0 && result._0 === undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._3(validator.validate, input, index, metadata);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfStringTypeOnChangeInOnBlurMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._1(validator.validate, input);
        if (result.TAG === /* Ok */0 && result._0 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        var result$1 = Curry._1(validator.validate, input);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfStringTypeOnChangeInOnBlurModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, metadata);
        if (result.TAG === /* Ok */0 && result._0 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._2(validator.validate, input, metadata);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfStringTypeOnChangeInOnBlurMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, index);
        if (result.TAG === /* Ok */0 && result._0 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._2(validator.validate, input, index);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfStringTypeOnChangeInOnBlurModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._3(validator.validate, input, index, metadata);
        if (result.TAG === /* Ok */0 && result._0 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result$1 = Curry._3(validator.validate, input, index, metadata);
        if (result$1.TAG === /* Ok */0 && result$1._0 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionStringTypeOnChangeInOnBlurMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var match$1 = Curry._1(validator.validate, input);
        if (match$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        }
        var match$2 = match$1._0;
        if (match$2 !== undefined && match$2 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        var result = Curry._1(validator.validate, input);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
        var match$3 = result._0;
        if (match$3 !== undefined && match$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionStringTypeOnChangeInOnBlurModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var match$1 = Curry._2(validator.validate, input, metadata);
        if (match$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        }
        var match$2 = match$1._0;
        if (match$2 !== undefined && match$2 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result = Curry._2(validator.validate, input, metadata);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
        var match$3 = result._0;
        if (match$3 !== undefined && match$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var match$1 = Curry._2(validator.validate, input, index);
        if (match$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        }
        var match$2 = match$1._0;
        if (match$2 !== undefined && match$2 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result = Curry._2(validator.validate, input, index);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
        var match$3 = result._0;
        if (match$3 !== undefined && match$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var match$1 = Curry._3(validator.validate, input, index, metadata);
        if (match$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        }
        var match$2 = match$1._0;
        if (match$2 !== undefined && match$2 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: match$1,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var result = Curry._3(validator.validate, input, index, metadata);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
        var match$3 = result._0;
        if (match$3 !== undefined && match$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOnChangeInOnChangeMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._1(validator.validate, input);
        if (x.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        var x$1 = Curry._1(validator.validate, input);
        if (x$1.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOnChangeInOnChangeModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, metadata);
        if (x.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._2(validator.validate, input, metadata);
        if (x$1.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOnChangeInOnChangeMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, index);
        if (x.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._2(validator.validate, input, index);
        if (x$1.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOnChangeInOnChangeModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._3(validator.validate, input, index, metadata);
        if (x.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._3(validator.validate, input, index, metadata);
        if (x$1.TAG === /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1._0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionTypeOnChangeInOnChangeMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._1(validator.validate, input);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        var x$2 = Curry._1(validator.validate, input);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionTypeOnChangeInOnChangeModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, metadata);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._2(validator.validate, input, metadata);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, index);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._2(validator.validate, input, index);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._3(validator.validate, input, index, metadata);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._3(validator.validate, input, index, metadata);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined) {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfStringTypeOnChangeInOnChangeMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._1(validator.validate, input);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
        var x = result._0;
        if (x === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x
                    });
        }
    case 2 :
        var x$1 = Curry._1(validator.validate, input);
        if (x$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
        var x$2 = x$1._0;
        if (x$2 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$2
                    });
        }
    
  }
}

function validateFieldOfStringTypeOnChangeInOnChangeModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, metadata);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
        var x = result._0;
        if (x === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._2(validator.validate, input, metadata);
        if (x$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
        var x$2 = x$1._0;
        if (x$2 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$2
                    });
        }
    
  }
}

function validateFieldOfCollectionOfStringTypeOnChangeInOnChangeMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._2(validator.validate, input, index);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
        var x = result._0;
        if (x === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._2(validator.validate, input, index);
        if (x$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
        var x$2 = x$1._0;
        if (x$2 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$2
                    });
        }
    
  }
}

function validateFieldOfCollectionOfStringTypeOnChangeInOnChangeModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var result = Curry._3(validator.validate, input, index, metadata);
        if (result.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Hidden */1
                    });
        }
        var x = result._0;
        if (x === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: result,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$1 = Curry._3(validator.validate, input, index, metadata);
        if (x$1.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        }
        var x$2 = x$1._0;
        if (x$2 === "") {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$1,
                      _1: /* Shown */0
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$2
                    });
        }
    
  }
}

function validateFieldOfOptionStringTypeOnChangeInOnChangeMode(input, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 3;
  } else {
    exit = 2;
  }
  if (exit$1 === 3) {
    if (submissionStatus) {
      exit = 2;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 2;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            return Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      });
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._1(validator.validate, input);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined && x$1 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        var x$2 = Curry._1(validator.validate, input);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined && x$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfOptionStringTypeOnChangeInOnChangeModeWithMetadata(input, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, metadata);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined && x$1 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._2(validator.validate, input, metadata);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined && x$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeMode(input, index, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._2(validator.validate, input, index);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined && x$1 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._2(validator.validate, input, index);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined && x$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeModeWithMetadata(input, index, metadata, fieldStatus, submissionStatus, validator, setStatus) {
  var match = validator.strategy;
  var exit = 0;
  var exit$1 = 0;
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    exit$1 = 4;
  } else {
    exit = 3;
  }
  if (exit$1 === 4) {
    if (submissionStatus) {
      exit = 3;
    } else {
      switch (match) {
        case /* OnFirstChange */1 :
            exit = 3;
            break;
        case /* OnFirstSuccess */2 :
        case /* OnFirstSuccessOrFirstBlur */3 :
            exit = 1;
            break;
        case /* OnFirstBlur */0 :
        case /* OnSubmit */4 :
            exit = 2;
            break;
        
      }
    }
  }
  switch (exit) {
    case 1 :
        var x = Curry._3(validator.validate, input, index, metadata);
        if (x.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Hidden */1
                    });
        }
        var x$1 = x._0;
        if (x$1 !== undefined && x$1 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$1
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x,
                      _1: /* Shown */0
                    });
        }
    case 2 :
        return Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Hidden */1
                  });
    case 3 :
        var x$2 = Curry._3(validator.validate, input, index, metadata);
        if (x$2.TAG !== /* Ok */0) {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
        var x$3 = x$2._0;
        if (x$3 !== undefined && x$3 !== "") {
          return Curry._1(setStatus, {
                      TAG: /* Validating */1,
                      _0: x$3
                    });
        } else {
          return Curry._1(setStatus, {
                      TAG: /* Dirty */0,
                      _0: x$2,
                      _1: /* Shown */0
                    });
        }
    
  }
}

function validateDependentFieldOnChange$1(input, fieldStatus, validator, setStatus) {
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    return ;
  } else {
    return Caml_option.some(Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._1(validator.validate, input),
                    _1: /* Shown */0
                  }));
  }
}

function validateDependentFieldOnChangeWithMetadata$1(input, metadata, fieldStatus, validator, setStatus) {
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    return ;
  } else {
    return Caml_option.some(Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, metadata),
                    _1: /* Shown */0
                  }));
  }
}

function validateDependentFieldOfCollectionOnChange$1(input, index, fieldStatus, validator, setStatus) {
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    return ;
  } else {
    return Caml_option.some(Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._2(validator.validate, input, index),
                    _1: /* Shown */0
                  }));
  }
}

function validateDependentFieldOfCollectionOnChangeWithMetadata$1(input, index, metadata, fieldStatus, validator, setStatus) {
  if (typeof fieldStatus === "number" || !(fieldStatus.TAG === /* Dirty */0 && !fieldStatus._1)) {
    return ;
  } else {
    return Caml_option.some(Curry._1(setStatus, {
                    TAG: /* Dirty */0,
                    _0: Curry._3(validator.validate, input, index, metadata),
                    _1: /* Shown */0
                  }));
  }
}

function validateFieldOnBlur(input, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._1(validator.validate, input);
      if (x.TAG === /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x._0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOnBlurWithMetadata(input, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, metadata);
      if (x.TAG === /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x._0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOnBlur(input, index, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, index),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, index);
      if (x.TAG === /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x._0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOnBlurWithMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._3(validator.validate, input, index, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._3(validator.validate, input, index, metadata);
      if (x.TAG === /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x._0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfOptionTypeOnBlur(input, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._1(validator.validate, input);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 !== undefined) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfOptionTypeOnBlurWithMetadata(input, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, metadata);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 !== undefined) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOfOptionTypeOnBlur(input, index, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, index),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, index);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 !== undefined) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOfOptionTypeOnBlurWithMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._3(validator.validate, input, index, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._3(validator.validate, input, index, metadata);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 !== undefined) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
    }
    
  }
  
}

function validateFieldOfStringTypeOnBlur(input, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._1(validator.validate, input);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 === "") {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      }
    }
    
  }
  
}

function validateFieldOfStringTypeOnBlurWithMetadata(input, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, metadata);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 === "") {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOfStringTypeOnBlur(input, index, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, index),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, index);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 === "") {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      }
    }
    
  }
  
}

function validateFieldOfCollectionOfStringTypeOnBlurWithMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._3(validator.validate, input, index, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._3(validator.validate, input, index, metadata);
      if (x.TAG !== /* Ok */0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      }
      var x$1 = x._0;
      if (x$1 === "") {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: x,
                        _1: /* Shown */0
                      }));
      } else {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Validating */1,
                        _0: x$1
                      }));
      }
    }
    
  }
  
}

function validateFieldOfOptionStringTypeOnBlur(input, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._1(validator.validate, input),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._1(validator.validate, input);
      var exit$2 = 0;
      var result;
      if (x.TAG === /* Ok */0) {
        var x$1 = x._0;
        if (x$1 !== undefined) {
          if (x$1 !== "") {
            return Caml_option.some(Curry._1(setStatus, {
                            TAG: /* Validating */1,
                            _0: x$1
                          }));
          }
          result = x;
          exit$2 = 3;
        } else {
          result = x;
          exit$2 = 3;
        }
      } else {
        result = x;
        exit$2 = 3;
      }
      if (exit$2 === 3) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: result,
                        _1: /* Shown */0
                      }));
      }
      
    }
    
  }
  
}

function validateFieldOfOptionStringTypeOnBlurWithMetadata(input, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, metadata);
      var exit$2 = 0;
      var result;
      if (x.TAG === /* Ok */0) {
        var x$1 = x._0;
        if (x$1 !== undefined) {
          if (x$1 !== "") {
            return Caml_option.some(Curry._1(setStatus, {
                            TAG: /* Validating */1,
                            _0: x$1
                          }));
          }
          result = x;
          exit$2 = 3;
        } else {
          result = x;
          exit$2 = 3;
        }
      } else {
        result = x;
        exit$2 = 3;
      }
      if (exit$2 === 3) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: result,
                        _1: /* Shown */0
                      }));
      }
      
    }
    
  }
  
}

function validateFieldOfCollectionOfOptionStringTypeOnBlur(input, index, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._2(validator.validate, input, index),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._2(validator.validate, input, index);
      var exit$2 = 0;
      var result;
      if (x.TAG === /* Ok */0) {
        var x$1 = x._0;
        if (x$1 !== undefined) {
          if (x$1 !== "") {
            return Caml_option.some(Curry._1(setStatus, {
                            TAG: /* Validating */1,
                            _0: x$1
                          }));
          }
          result = x;
          exit$2 = 3;
        } else {
          result = x;
          exit$2 = 3;
        }
      } else {
        result = x;
        exit$2 = 3;
      }
      if (exit$2 === 3) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: result,
                        _1: /* Shown */0
                      }));
      }
      
    }
    
  }
  
}

function validateFieldOfCollectionOfOptionStringTypeOnBlurWithMetadata(input, index, metadata, fieldStatus, validator, setStatus) {
  var exit = 0;
  if (typeof fieldStatus === "number") {
    exit = 1;
  } else {
    if (fieldStatus.TAG !== /* Dirty */0) {
      return ;
    }
    if (!fieldStatus._1) {
      return ;
    }
    exit = 1;
  }
  if (exit === 1) {
    var match = validator.strategy;
    var exit$1 = 0;
    if (match !== 3) {
      if (match !== 0) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: Curry._3(validator.validate, input, index, metadata),
                        _1: /* Hidden */1
                      }));
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var x = Curry._3(validator.validate, input, index, metadata);
      var exit$2 = 0;
      var result;
      if (x.TAG === /* Ok */0) {
        var x$1 = x._0;
        if (x$1 !== undefined) {
          if (x$1 !== "") {
            return Caml_option.some(Curry._1(setStatus, {
                            TAG: /* Validating */1,
                            _0: x$1
                          }));
          }
          result = x;
          exit$2 = 3;
        } else {
          result = x;
          exit$2 = 3;
        }
      } else {
        result = x;
        exit$2 = 3;
      }
      if (exit$2 === 3) {
        return Caml_option.some(Curry._1(setStatus, {
                        TAG: /* Dirty */0,
                        _0: result,
                        _1: /* Shown */0
                      }));
      }
      
    }
    
  }
  
}

var Async = {
  validateAsync: validateAsync,
  validateAsyncWithMetadata: validateAsyncWithMetadata,
  exposeFieldResult: exposeFieldResult$1,
  validateFieldOnChangeInOnBlurMode: validateFieldOnChangeInOnBlurMode,
  validateFieldOnChangeInOnBlurModeWithMetadata: validateFieldOnChangeInOnBlurModeWithMetadata,
  validateFieldOfCollectionOnChangeInOnBlurMode: validateFieldOfCollectionOnChangeInOnBlurMode,
  validateFieldOfCollectionOnChangeInOnBlurModeWithMetadata: validateFieldOfCollectionOnChangeInOnBlurModeWithMetadata,
  validateFieldOfOptionTypeOnChangeInOnBlurMode: validateFieldOfOptionTypeOnChangeInOnBlurMode,
  validateFieldOfOptionTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfOptionTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurMode: validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurMode,
  validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfCollectionOfOptionTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOfStringTypeOnChangeInOnBlurMode: validateFieldOfStringTypeOnChangeInOnBlurMode,
  validateFieldOfStringTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfStringTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOfCollectionOfStringTypeOnChangeInOnBlurMode: validateFieldOfCollectionOfStringTypeOnChangeInOnBlurMode,
  validateFieldOfCollectionOfStringTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfCollectionOfStringTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOfOptionStringTypeOnChangeInOnBlurMode: validateFieldOfOptionStringTypeOnChangeInOnBlurMode,
  validateFieldOfOptionStringTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfOptionStringTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurMode: validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurMode,
  validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurModeWithMetadata: validateFieldOfCollectionOfOptionStringTypeOnChangeInOnBlurModeWithMetadata,
  validateFieldOnChangeInOnChangeMode: validateFieldOnChangeInOnChangeMode,
  validateFieldOnChangeInOnChangeModeWithMetadata: validateFieldOnChangeInOnChangeModeWithMetadata,
  validateFieldOfCollectionOnChangeInOnChangeMode: validateFieldOfCollectionOnChangeInOnChangeMode,
  validateFieldOfCollectionOnChangeInOnChangeModeWithMetadata: validateFieldOfCollectionOnChangeInOnChangeModeWithMetadata,
  validateFieldOfOptionTypeOnChangeInOnChangeMode: validateFieldOfOptionTypeOnChangeInOnChangeMode,
  validateFieldOfOptionTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfOptionTypeOnChangeInOnChangeModeWithMetadata,
  validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeMode: validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeMode,
  validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfCollectionOfOptionTypeOnChangeInOnChangeModeWithMetadata,
  validateFieldOfStringTypeOnChangeInOnChangeMode: validateFieldOfStringTypeOnChangeInOnChangeMode,
  validateFieldOfStringTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfStringTypeOnChangeInOnChangeModeWithMetadata,
  validateFieldOfCollectionOfStringTypeOnChangeInOnChangeMode: validateFieldOfCollectionOfStringTypeOnChangeInOnChangeMode,
  validateFieldOfCollectionOfStringTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfCollectionOfStringTypeOnChangeInOnChangeModeWithMetadata,
  validateFieldOfOptionStringTypeOnChangeInOnChangeMode: validateFieldOfOptionStringTypeOnChangeInOnChangeMode,
  validateFieldOfOptionStringTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfOptionStringTypeOnChangeInOnChangeModeWithMetadata,
  validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeMode: validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeMode,
  validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeModeWithMetadata: validateFieldOfCollectionOfOptionStringTypeOnChangeInOnChangeModeWithMetadata,
  validateDependentFieldOnChange: validateDependentFieldOnChange$1,
  validateDependentFieldOnChangeWithMetadata: validateDependentFieldOnChangeWithMetadata$1,
  validateDependentFieldOfCollectionOnChange: validateDependentFieldOfCollectionOnChange$1,
  validateDependentFieldOfCollectionOnChangeWithMetadata: validateDependentFieldOfCollectionOnChangeWithMetadata$1,
  validateFieldOnBlur: validateFieldOnBlur,
  validateFieldOnBlurWithMetadata: validateFieldOnBlurWithMetadata,
  validateFieldOfCollectionOnBlur: validateFieldOfCollectionOnBlur,
  validateFieldOfCollectionOnBlurWithMetadata: validateFieldOfCollectionOnBlurWithMetadata,
  validateFieldOfOptionTypeOnBlur: validateFieldOfOptionTypeOnBlur,
  validateFieldOfOptionTypeOnBlurWithMetadata: validateFieldOfOptionTypeOnBlurWithMetadata,
  validateFieldOfCollectionOfOptionTypeOnBlur: validateFieldOfCollectionOfOptionTypeOnBlur,
  validateFieldOfCollectionOfOptionTypeOnBlurWithMetadata: validateFieldOfCollectionOfOptionTypeOnBlurWithMetadata,
  validateFieldOfStringTypeOnBlur: validateFieldOfStringTypeOnBlur,
  validateFieldOfStringTypeOnBlurWithMetadata: validateFieldOfStringTypeOnBlurWithMetadata,
  validateFieldOfCollectionOfStringTypeOnBlur: validateFieldOfCollectionOfStringTypeOnBlur,
  validateFieldOfCollectionOfStringTypeOnBlurWithMetadata: validateFieldOfCollectionOfStringTypeOnBlurWithMetadata,
  validateFieldOfOptionStringTypeOnBlur: validateFieldOfOptionStringTypeOnBlur,
  validateFieldOfOptionStringTypeOnBlurWithMetadata: validateFieldOfOptionStringTypeOnBlurWithMetadata,
  validateFieldOfCollectionOfOptionStringTypeOnBlur: validateFieldOfCollectionOfOptionStringTypeOnBlur,
  validateFieldOfCollectionOfOptionStringTypeOnBlurWithMetadata: validateFieldOfCollectionOfOptionStringTypeOnBlurWithMetadata
};

var Debouncer;

var ReactUpdate;

export {
  Debouncer ,
  ReactUpdate ,
  exposeFieldResult ,
  validateFieldOnChangeWithoutValidator ,
  validateFieldOnChangeWithValidator ,
  validateFieldOnChangeWithValidatorAndMetadata ,
  validateFieldOfCollectionOnChangeWithValidator ,
  validateFieldOfCollectionOnChangeWithValidatorAndMetadata ,
  validateDependentFieldOnChange ,
  validateDependentFieldOnChangeWithMetadata ,
  validateDependentFieldOfCollectionOnChange ,
  validateDependentFieldOfCollectionOnChangeWithMetadata ,
  validateFieldOnBlurWithoutValidator ,
  validateFieldOnBlurWithValidator ,
  validateFieldOnBlurWithValidatorAndMetadata ,
  validateFieldOfCollectionOnBlurWithValidator ,
  validateFieldOfCollectionOnBlurWithValidatorAndMetadata ,
  Async ,
  
}
/* No side effect */
