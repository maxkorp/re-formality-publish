// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as React from "react";
import * as Belt_Map from "bs-platform/lib/es6/belt_Map.mjs";
import * as Belt_List from "bs-platform/lib/es6/belt_List.mjs";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as FormalityCompat__ReactUpdate from "./FormalityCompat__ReactUpdate.bs.js";

function Make(Form) {
  var FieldId = Form.FieldId;
  var getInitialState = function (input) {
    return {
            input: input,
            status: /* Editing */0,
            fields: Belt_List.reduce(Form.validators, Belt_Map.make(FieldId), (function (fields, validator) {
                    return Belt_Map.set(fields, validator.field, /* Pristine */0);
                  })),
            validators: {
              contents: Belt_List.reduce(Form.validators, Belt_Map.make(FieldId), (function (fields, validator) {
                      return Belt_Map.set(fields, validator.field, validator);
                    }))
            },
            submittedOnce: false
          };
  };
  var useForm = function (initialState, onSubmit) {
    var memoizedInitialState = React.useMemo((function () {
            return getInitialState(initialState);
          }), [initialState]);
    var match = FormalityCompat__ReactUpdate.useReducer(memoizedInitialState, (function (state, action) {
            if (typeof action === "number") {
              switch (action) {
                case /* Submit */0 :
                    var match = state.status;
                    if (typeof match !== "number" && match.TAG === /* Submitting */0) {
                      return /* NoUpdate */0;
                    }
                    var match$1 = Belt_Map.reduce(state.validators.contents, [
                          true,
                          state.fields
                        ], (function (param, field, validator) {
                            var result = Curry._1(validator.validate, state.input);
                            var fields = Belt_Map.set(param[1], field, /* Dirty */{
                                  _0: result,
                                  _1: /* Shown */0
                                });
                            if (param[0] && result.TAG === /* Ok */0) {
                              return [
                                      true,
                                      fields
                                    ];
                            } else {
                              return [
                                      false,
                                      fields
                                    ];
                            }
                          }));
                    var fields = match$1[1];
                    if (!match$1[0]) {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: state.input,
                                status: /* Editing */0,
                                fields: fields,
                                validators: state.validators,
                                submittedOnce: true
                              }
                            };
                    }
                    var error = state.status;
                    var tmp;
                    tmp = typeof error === "number" || error.TAG !== /* SubmissionFailed */1 ? undefined : Caml_option.some(error._0);
                    return {
                            TAG: /* UpdateWithSideEffects */1,
                            _0: {
                              input: state.input,
                              status: {
                                TAG: /* Submitting */0,
                                _0: tmp
                              },
                              fields: fields,
                              validators: state.validators,
                              submittedOnce: true
                            },
                            _1: (function (param) {
                                var dispatch = param.dispatch;
                                return Curry._2(onSubmit, param.state.input, {
                                            notifyOnSuccess: (function (state) {
                                                return Curry._1(dispatch, {
                                                            TAG: /* SetSubmittedStatus */2,
                                                            _0: state
                                                          });
                                              }),
                                            notifyOnFailure: (function (error) {
                                                return Curry._1(dispatch, {
                                                            TAG: /* SetSubmissionFailedStatus */3,
                                                            _0: error
                                                          });
                                              }),
                                            reset: (function (param) {
                                                return Curry._1(dispatch, /* Reset */3);
                                              }),
                                            dismissSubmissionResult: (function (param) {
                                                return Curry._1(dispatch, /* DismissSubmissionResult */2);
                                              })
                                          });
                              })
                          };
                    break;
                case /* DismissSubmissionError */1 :
                    var match$2 = state.status;
                    if (typeof match$2 === "number" || match$2.TAG !== /* SubmissionFailed */1) {
                      return /* NoUpdate */0;
                    } else {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: state.input,
                                status: /* Editing */0,
                                fields: state.fields,
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    }
                case /* DismissSubmissionResult */2 :
                    var match$3 = state.status;
                    if (typeof match$3 === "number") {
                      if (match$3 === /* Editing */0) {
                        return /* NoUpdate */0;
                      }
                      
                    } else if (match$3.TAG === /* Submitting */0) {
                      return /* NoUpdate */0;
                    }
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              status: /* Editing */0,
                              fields: state.fields,
                              validators: state.validators,
                              submittedOnce: state.submittedOnce
                            }
                          };
                case /* Reset */3 :
                    return {
                            TAG: /* Update */0,
                            _0: getInitialState(initialState)
                          };
                
              }
            } else {
              switch (action.TAG | 0) {
                case /* Change */0 :
                    var input = action._1;
                    var field = action._0;
                    var validator = Belt_Map.get(state.validators.contents, field);
                    if (validator === undefined) {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: input,
                                status: state.status,
                                fields: Belt_Map.set(state.fields, field, /* Dirty */{
                                      _0: {
                                        TAG: /* Ok */0,
                                        _0: /* Valid */0
                                      },
                                      _1: /* Hidden */1
                                    }),
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    }
                    var status = Belt_Map.get(state.fields, field);
                    var result = Curry._1(validator.validate, input);
                    var dependents = validator.dependents;
                    var fields$1 = dependents !== undefined ? Belt_List.reduce(dependents, state.fields, (function (fields, field) {
                              var status = Belt_Map.get(fields, field);
                              if (status === undefined) {
                                return fields;
                              }
                              if (!status) {
                                return fields;
                              }
                              if (status._1) {
                                return fields;
                              }
                              var validator = Belt_Map.getExn(state.validators.contents, field);
                              return Belt_Map.set(fields, field, /* Dirty */{
                                          _0: Curry._1(validator.validate, input),
                                          _1: /* Shown */0
                                        });
                            })) : state.fields;
                    var match$4 = validator.strategy;
                    var match$5 = state.submittedOnce;
                    var exit = 0;
                    var exit$1 = 0;
                    if (status !== undefined && status && !status._1) {
                      exit = 3;
                    } else {
                      exit$1 = 4;
                    }
                    if (exit$1 === 4) {
                      if (match$5) {
                        exit = 3;
                      } else {
                        switch (match$4) {
                          case /* OnFirstChange */1 :
                              exit = 3;
                              break;
                          case /* OnFirstSuccess */2 :
                          case /* OnFirstSuccessOrFirstBlur */3 :
                              exit = 1;
                              break;
                          case /* OnFirstBlur */0 :
                          case /* OnSubmit */4 :
                              exit = 2;
                              break;
                          
                        }
                      }
                    }
                    switch (exit) {
                      case 1 :
                          var tmp$1;
                          tmp$1 = result.TAG === /* Ok */0 ? Belt_Map.set(fields$1, field, /* Dirty */{
                                  _0: result,
                                  _1: /* Shown */0
                                }) : Belt_Map.set(fields$1, field, /* Dirty */{
                                  _0: result,
                                  _1: /* Hidden */1
                                });
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    input: input,
                                    status: state.status,
                                    fields: tmp$1,
                                    validators: state.validators,
                                    submittedOnce: state.submittedOnce
                                  }
                                };
                      case 2 :
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    input: input,
                                    status: state.status,
                                    fields: Belt_Map.set(fields$1, field, /* Dirty */{
                                          _0: result,
                                          _1: /* Hidden */1
                                        }),
                                    validators: state.validators,
                                    submittedOnce: state.submittedOnce
                                  }
                                };
                      case 3 :
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    input: input,
                                    status: state.status,
                                    fields: Belt_Map.set(fields$1, field, /* Dirty */{
                                          _0: result,
                                          _1: /* Shown */0
                                        }),
                                    validators: state.validators,
                                    submittedOnce: state.submittedOnce
                                  }
                                };
                      
                    }
                    break;
                case /* Blur */1 :
                    var field$1 = action._0;
                    var status$1 = Belt_Map.get(state.fields, field$1);
                    var validator$1 = Belt_Map.get(state.validators.contents, field$1);
                    var exit$2 = 0;
                    if (status$1 !== undefined && status$1) {
                      if (!status$1._1) {
                        return /* NoUpdate */0;
                      }
                      if (validator$1 === undefined) {
                        return /* NoUpdate */0;
                      }
                      var result$1 = Curry._1(validator$1.validate, state.input);
                      var match$6 = validator$1.strategy;
                      var exit$3 = 0;
                      if (match$6 !== 3) {
                        if (match$6 !== 0) {
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    input: state.input,
                                    status: state.status,
                                    fields: Belt_Map.set(state.fields, field$1, /* Dirty */{
                                          _0: result$1,
                                          _1: /* Hidden */1
                                        }),
                                    validators: state.validators,
                                    submittedOnce: state.submittedOnce
                                  }
                                };
                        }
                        exit$3 = 2;
                      } else {
                        exit$3 = 2;
                      }
                      if (exit$3 === 2) {
                        return {
                                TAG: /* Update */0,
                                _0: {
                                  input: state.input,
                                  status: state.status,
                                  fields: Belt_Map.set(state.fields, field$1, /* Dirty */{
                                        _0: result$1,
                                        _1: /* Shown */0
                                      }),
                                  validators: state.validators,
                                  submittedOnce: state.submittedOnce
                                }
                              };
                      }
                      
                    } else {
                      exit$2 = 1;
                    }
                    if (exit$2 === 1) {
                      if (validator$1 === undefined) {
                        return {
                                TAG: /* Update */0,
                                _0: {
                                  input: state.input,
                                  status: state.status,
                                  fields: Belt_Map.set(state.fields, field$1, /* Dirty */{
                                        _0: {
                                          TAG: /* Ok */0,
                                          _0: /* Valid */0
                                        },
                                        _1: /* Hidden */1
                                      }),
                                  validators: state.validators,
                                  submittedOnce: state.submittedOnce
                                }
                              };
                      }
                      var result$2 = Curry._1(validator$1.validate, state.input);
                      var match$7 = validator$1.strategy;
                      var exit$4 = 0;
                      if (match$7 !== 3) {
                        if (match$7 !== 0) {
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    input: state.input,
                                    status: state.status,
                                    fields: Belt_Map.set(state.fields, field$1, /* Dirty */{
                                          _0: result$2,
                                          _1: /* Hidden */1
                                        }),
                                    validators: state.validators,
                                    submittedOnce: state.submittedOnce
                                  }
                                };
                        }
                        exit$4 = 2;
                      } else {
                        exit$4 = 2;
                      }
                      if (exit$4 === 2) {
                        return {
                                TAG: /* Update */0,
                                _0: {
                                  input: state.input,
                                  status: state.status,
                                  fields: Belt_Map.set(state.fields, field$1, /* Dirty */{
                                        _0: result$2,
                                        _1: /* Shown */0
                                      }),
                                  validators: state.validators,
                                  submittedOnce: state.submittedOnce
                                }
                              };
                      }
                      
                    }
                    break;
                case /* SetSubmittedStatus */2 :
                    var data = action._0;
                    if (data !== undefined) {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: Caml_option.valFromOption(data),
                                status: /* Submitted */1,
                                fields: Belt_Map.map(state.fields, (function (param) {
                                        return /* Pristine */0;
                                      })),
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    } else {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: state.input,
                                status: /* Submitted */1,
                                fields: Belt_Map.map(state.fields, (function (param) {
                                        return /* Pristine */0;
                                      })),
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    }
                case /* SetSubmissionFailedStatus */3 :
                    return {
                            TAG: /* Update */0,
                            _0: {
                              input: state.input,
                              status: {
                                TAG: /* SubmissionFailed */1,
                                _0: action._0
                              },
                              fields: state.fields,
                              validators: state.validators,
                              submittedOnce: state.submittedOnce
                            }
                          };
                case /* MapSubmissionError */4 :
                    var map = action._0;
                    var error$1 = state.status;
                    if (typeof error$1 === "number") {
                      return /* NoUpdate */0;
                    }
                    if (error$1.TAG !== /* Submitting */0) {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: state.input,
                                status: {
                                  TAG: /* SubmissionFailed */1,
                                  _0: Curry._1(map, error$1._0)
                                },
                                fields: state.fields,
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    }
                    var error$2 = error$1._0;
                    if (error$2 !== undefined) {
                      return {
                              TAG: /* Update */0,
                              _0: {
                                input: state.input,
                                status: {
                                  TAG: /* Submitting */0,
                                  _0: Caml_option.some(Curry._1(map, Caml_option.valFromOption(error$2)))
                                },
                                fields: state.fields,
                                validators: state.validators,
                                submittedOnce: state.submittedOnce
                              }
                            };
                    } else {
                      return /* NoUpdate */0;
                    }
                
              }
            }
          }));
    var dispatch = match[1];
    var state = match[0];
    var match$1 = state.status;
    var tmp;
    tmp = typeof match$1 === "number" || match$1.TAG !== /* Submitting */0 ? false : true;
    return {
            state: state.input,
            status: state.status,
            result: (function (field) {
                var match = Belt_Map.get(state.fields, field);
                if (match !== undefined && match && !match._1) {
                  return match._0;
                }
                
              }),
            dirty: (function (param) {
                return Belt_Map.some(state.fields, (function (param, status) {
                              if (status) {
                                return true;
                              } else {
                                return false;
                              }
                            }));
              }),
            valid: (function (param) {
                return Belt_Map.every(state.fields, (function (field, status) {
                              if (status) {
                                if (status._0.TAG === /* Ok */0) {
                                  return true;
                                } else {
                                  return false;
                                }
                              } else {
                                return Belt_Option.getWithDefault(Belt_Option.map(Belt_Map.get(state.validators.contents, field), (function (validator) {
                                                  var match = Curry._1(validator.validate, state.input);
                                                  if (match.TAG === /* Ok */0) {
                                                    return true;
                                                  } else {
                                                    return false;
                                                  }
                                                })), true);
                              }
                            }));
              }),
            submitting: tmp,
            change: (function (field, state) {
                return Curry._1(dispatch, {
                            TAG: /* Change */0,
                            _0: field,
                            _1: state
                          });
              }),
            blur: (function (field) {
                return Curry._1(dispatch, {
                            TAG: /* Blur */1,
                            _0: field
                          });
              }),
            submit: (function (param) {
                return Curry._1(dispatch, /* Submit */0);
              }),
            mapSubmissionError: (function (map) {
                return Curry._1(dispatch, {
                            TAG: /* MapSubmissionError */4,
                            _0: map
                          });
              }),
            dismissSubmissionError: (function (param) {
                return Curry._1(dispatch, /* DismissSubmissionError */1);
              }),
            dismissSubmissionResult: (function (param) {
                return Curry._1(dispatch, /* DismissSubmissionResult */2);
              }),
            reset: (function (param) {
                return Curry._1(dispatch, /* Reset */3);
              })
          };
  };
  return {
          FieldId: FieldId,
          getInitialState: getInitialState,
          useForm: useForm
        };
}

var Validation;

var Strategy;

var FormStatus;

var ReactUpdate;

export {
  Validation ,
  Strategy ,
  FormStatus ,
  ReactUpdate ,
  Make ,
  
}
/* react Not a pure module */
